name: "SiamesePlaces205-CNN"
layer {
  name: 'PythonLayer'
  type: 'Python'
  top: 'data'
  top: 'data_p'
  top: 'sim'
  top: 'label1'
  top: 'label2'
  include {
    phase: TRAIN
  }
  python_param {
    module: 'mypythonlayer2'
    layer: 'MyLayer'
    param_str: '{"batch_size": 1, "final_image_size": 227, "scale_min_size": 256, "num_channels": 3, "file_name": "data/imagelist.txt", "mean_image": "placesOriginalModel/places205CNN_mean.binaryproto", "image_source": "data/"}'
  }
}
layer {
  name: 'PythonLayer'
  type: 'Python'
  top: 'data'
  top: 'data_p'
  top: 'sim'
  top: 'label1'
  top: 'label2'
  include {
    phase: TEST
  }
  python_param {
    module: 'mypythonlayer2'
    layer: 'MyLayer'
    param_str: '{"batch_size": 1, "final_image_size": 227, "scale_min_size": 256, "num_channels": 3, "file_name": "data/imagelist_test.txt", "mean_image": "placesOriginalModel/places205CNN_mean.binaryproto", "image_source": "data/"}'
  }
}

layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  param {
    name: "conv1_w"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "conv1_b"
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 96
    kernel_size: 11
    stride: 4
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  bottom: "conv1"
  top: "conv1"
  name: "relu1"
  type: "ReLU"
}
layer {
  bottom: "conv1"
  top: "pool1"
  name: "pool1"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  bottom: "pool1"
  top: "norm1"
  name: "norm1"
  type: "LRN"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
layer {
  bottom: "norm1"
  top: "conv2"
  name: "conv2"
  type: "Convolution"
  param {
    name: "conv2_w"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "conv2_b"
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 2
    kernel_size: 5
    group: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  bottom: "conv2"
  top: "conv2"
  name: "relu2"
  type: "ReLU"
}
layer {
  bottom: "conv2"
  top: "pool2"
  name: "pool2"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  bottom: "pool2"
  top: "norm2"
  name: "norm2"
  type: "LRN"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
layer {
  bottom: "norm2"
  top: "conv3"
  name: "conv3"
  type: "Convolution"
  param {
    name: "conv3_w"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "conv3_b"
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 384
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  bottom: "conv3"
  top: "conv3"
  name: "relu3"
  type: "ReLU"
}
layer {
  bottom: "conv3"
  top: "conv4"
  name: "conv4"
  type: "Convolution"
  param {
    name: "conv4_w"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "conv4_b"
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 384
    pad: 1
    kernel_size: 3
    group: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  bottom: "conv4"
  top: "conv4"
  name: "relu4"
  type: "ReLU"
}
layer {
  bottom: "conv4"
  top: "conv5"
  name: "conv5"
  type: "Convolution"
  param {
    name: "conv5_w"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "conv5_b"
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    group: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  bottom: "conv5"
  top: "conv5"
  name: "relu5"
  type: "ReLU"
}
layer {
  bottom: "conv5"
  top: "pool5"
  name: "pool5"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  bottom: "pool5"
  top: "fc6"
  name: "fc6"
  type: "InnerProduct"
  param {
    name: "fc6_w"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "fc6_b"
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 4096
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  bottom: "fc6"
  top: "fc6"
  name: "relu6"
  type: "ReLU"
}
layer {
  bottom: "fc6"
  top: "fc6"
  name: "drop6"
  type: "Dropout"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  bottom: "fc6"
  top: "fc7"
  name: "fc7"
  type: "InnerProduct"
  param {
    name: "fc7_w"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "fc7_b"
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 4096
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  bottom: "fc7"
  top: "fc7"
  name: "relu7"
  type: "ReLU"
}
layer {
  bottom: "fc7"
  top: "fc7"
  name: "drop7"
  type: "Dropout"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "conv1_p"
  type: "Convolution"
  bottom: "data_p"
  top: "conv1_p"
  param {
    name: "conv1_w"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "conv1_b"
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 96
    kernel_size: 11
    stride: 4
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  bottom: "conv1_p"
  top: "conv1_p"
  name: "relu1_p"
  type: "ReLU"
}
layer {
  bottom: "conv1_p"
  top: "pool1_p"
  name: "pool1_p"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  bottom: "pool1_p"
  top: "norm1_p"
  name: "norm1_p"
  type: "LRN"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
layer {
  bottom: "norm1_p"
  top: "conv2_p"
  name: "conv2_p"
  type: "Convolution"
  param {
    name: "conv2_w"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "conv2_b"
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 2
    kernel_size: 5
    group: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  bottom: "conv2_p"
  top: "conv2_p"
  name: "relu2_p"
  type: "ReLU"
}
layer {
  bottom: "conv2_p"
  top: "pool2_p"
  name: "pool2_p"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  bottom: "pool2_p"
  top: "norm2_p"
  name: "norm2_p"
  type: "LRN"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
layer {
  bottom: "norm2_p"
  top: "conv3_p"
  name: "conv3_p"
  type: "Convolution"
  param {
    name: "conv3_w"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "conv3_b"
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 384
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  bottom: "conv3_p"
  top: "conv3_p"
  name: "relu3_p"
  type: "ReLU"
}
layer {
  bottom: "conv3_p"
  top: "conv4_p"
  name: "conv4_p"
  type: "Convolution"
  param {
    name: "conv4_w"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "conv4_b"
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 384
    pad: 1
    kernel_size: 3
    group: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  bottom: "conv4_p"
  top: "conv4_p"
  name: "relu4_p"
  type: "ReLU"
}
layer {
  bottom: "conv4_p"
  top: "conv5_p"
  name: "conv5_p"
  type: "Convolution"
  param {
    name: "conv5_w"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "conv5_b"
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    group: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  bottom: "conv5_p"
  top: "conv5_p"
  name: "relu5_p"
  type: "ReLU"
}
layer {
  bottom: "conv5_p"
  top: "pool5_p"
  name: "pool5_p"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  bottom: "pool5_p"
  top: "fc6_p"
  name: "fc6_p"
  type: "InnerProduct"
  param {
    name: "fc6_w"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "fc6_b"
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 4096
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  bottom: "fc6_p"
  top: "fc6_p"
  name: "relu6_p"
  type: "ReLU"
}
layer {
  bottom: "fc6_p"
  top: "fc6_p"
  name: "drop6_p"
  type: "Dropout"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  bottom: "fc6_p"
  top: "fc7_p"
  name: "fc7_p"
  type: "InnerProduct"
  param {
    name: "fc7_w"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "fc7_b"
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 4096
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  bottom: "fc7_p"
  top: "fc7_p"
  name: "relu7_p"
  type: "ReLU"
}
layer {
  bottom: "fc7_p"
  top: "fc7_p"
  name: "drop7_p"
  type: "Dropout"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  bottom: "fc7"
  top: "fc8_s"
  name: "fc8_s"
  type: "InnerProduct"
  param {
    name: "fc8_s_w"
    lr_mult: 1000
    decay_mult: 1
  }
  param {
    name: "fc8_s_b"
    lr_mult: 2000
    decay_mult: 0
  }
  inner_product_param {
    num_output: 1000
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  bottom: "fc7_p"
  top: "fc8_s_p"
  name: "fc8_s_p"
  type: "InnerProduct"
  param {
    name: "fc8_s_w"
    lr_mult: 1000
    decay_mult: 1
  }
  param {
    name: "fc8_s_b"
    lr_mult: 2000
    decay_mult: 0
  }
  inner_product_param {
    num_output: 1000
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  bottom: "fc8_s_p"
  top: "fc8_s_p_r"
  name: "relu8_p"
  type: "ReLU"
}
layer {
  bottom: "fc8_s_p_r"
  top: "fc8_s_p_r"
  name: "drop8_p"
  type: "Dropout"
  dropout_param {
    dropout_ratio: 0.5
  }
}

#softmax branch

layer {
  bottom: "fc8_s_p_r"
  top: "fc9_f_p"
  name: "fc9_f_p"
  type: "InnerProduct"
  param {
    name: "fc9_f_w"
    lr_mult: 1000
    decay_mult: 1
  }
  param {
    name: "fc9_f_b"
    lr_mult: 2000
    decay_mult: 0
  }
  inner_product_param {
    num_output: 6
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}

layer {
  bottom: "fc8_s"
  top: "fc8_s_r"
  name: "relu8"
  type: "ReLU"
}
layer {
  bottom: "fc8_s_r"
  top: "fc8_s_r"
  name: "drop8"
  type: "Dropout"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  bottom: "fc8_s_r"
  top: "fc9_f"
  name: "fc9_f"
  type: "InnerProduct"
  param {
    name: "fc9_f_w"
    lr_mult: 1000
    decay_mult: 1
  }
  param {
    name: "fc9_f_b"
    lr_mult: 2000
    decay_mult: 0
  }
  inner_product_param {
    num_output: 6
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}

#contrastive branch

layer {
  bottom: "fc8_s"
  top: "fc8_s_sig"
  name: "sigmoid8"
  type: "Sigmoid"
}
layer {
  bottom: "fc8_s_p"
  top: "fc8_s_p_sig"
  name: "sigmoid8_p"
  type: "Sigmoid"
}

#loss layers

layer {
  name: "cont_loss"
  type: "ContrastiveLoss"
  bottom: "fc8_s_sig"
  bottom: "fc8_s_p_sig"
  bottom: "sim"
  #include {
  #  phase: TRAIN
  #}
  top: "cont_loss"
  contrastive_loss_param {
    margin: 10
  }
  loss_weight: 0.5
}
layer {
  name: "class_loss_1"
  type: "SoftmaxWithLoss"
  bottom: "fc9_f"
  bottom: "label1"
  #include {
  #  phase: TRAIN
  #}
  top: "softmax_loss_1"
  loss_weight: 0.25
}
layer {
  name: "class_loss_2"
  type: "SoftmaxWithLoss"
  bottom: "fc9_f_p"
  bottom: "label2"
  #include {
  #  phase: TRAIN
  #}
  top: "softmax_loss_2"
  loss_weight: 0.25
}

#Test final layer

layer {
  name: "testloss"
  type: "EuclideanLoss"
  bottom: "fc8_s_sig"
  bottom: "fc8_s_p_sig"
  #include {
  #  phase: TEST
  #}
  top: "euc_dist"
}
layer {
  name: "accuracy1"
  type: "Accuracy"
  bottom: "fc9_f"
  bottom: "label1"
  top: "accuracy1"
}
layer {
  name: "accuracy2"
  type: "Accuracy"
  bottom: "fc9_f_p"
  bottom: "label2"
  top: "accuracy2"
}
#layer {
#  bottom: "fc9_f"
#  top: "prob1"
#  name: "prob1"
#  type: "Softmax"
#}
#layer {
#  bottom: "fc9_f_p"
#  top: "prob2"
#  name: "prob2"
#  type: "Softmax"
#}

